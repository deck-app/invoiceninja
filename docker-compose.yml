version: '3.7'

services:
  server:
    #image: nginx
    build:
      context: ./nginx
    restart: always
    env_file: env
    volumes:
      # Vhost configuration
      #- ./config/caddy/Caddyfile:/etc/caddy/Caddyfiledocker-com
      - ./config/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./config/nginx/in-vhost.conf:/etc/nginx/conf.d/in-vhost.conf:ro
      - ./docker/app/public:/var/www/app/public:rw,delegated
      - ./docker/app/storage:/var/www/app/storage:rw,delegated
    depends_on:
      - app
    # Run webserver nginx on port 80
    # Feel free to modify depending what port is already occupied
    ports: 
      - '${NINJA_PORT}:80'
      #- '443:443'
    networks:
      - invoiceninja
    #command: chown -R 1500:1500 docker/app
    extra_hosts:
      - 'in5.localhost:192.168.0.124 ' #host and ip

  app:
    image: invoiceninja/invoiceninja:5
    env_file: env
    restart: always
    volumes:
      - './config/hosts:/etc/hosts:ro'
      - './config/shutdown.sh:/usr/local/bin/shutdown.sh'
      - './docker/app/public:/var/www/app/public:rw,delegated'
      - './docker/app/storage:/var/www/app/storage:rw,delegated'
    depends_on:
      - db
    networks: 
      - invoiceninja  
   # command: chown -R 1500:1500 docker/app
    extra_hosts:
      - 'in5.localhost:192.168.0.124 ' #host and ip

  db:
    image: mysql:5
    ports:
      - '3305:3306'
    restart: always
    environment: 
      - 'MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}'
      - 'MYSQL_USER=${DB_USER}'
      - 'MYSQL_PASSWORD=${DB_PASSWORD}'
      - 'MYSQL_DATABASE=${DB_NAME}'
    volumes:
      - './docker/mysql/data:/var/lib/mysql:rw,delegated'
    networks:
      - invoiceninja
    extra_hosts:
      - 'in5.localhost:192.168.0.124 ' #host and ip

  # THIS IS ONLY A VALID CONFIGURATION FOR IN 4. DO NOT USE FOR IN 5.
  # cron:
  #   image: invoiceninja/invoiceninja:alpine-4
  #   volumes:
      # - ./docker/app/public:/var/www/app/public:rw,delegated
      # - ./docker/app/storage:/var/www/app/storage:rw,delegated
      # - ./docker/app/public/logo:/var/www/app/public/logo:rw,delegated
  #   entrypoint: |
  #     /bin/sh -c 'sh -s <<EOF
  #     trap 'break;exit' SIGHUP SIGINT SIGTERM
  #     sleep 300s
  #     while /bin/true; do
  #       ./artisan ninja:send-invoices
  #       ./artisan ninja:send-reminders
  #       sleep 1d
  #     done
  #     EOF'
  #   networks:
  #     - invoiceninja
  #     

networks:
  invoiceninja: